stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: maven:latest
  script:
    - cd BackEnd
    - echo "Building the pipeline"
    # - mvn eclipse:eclipse
    - mvn clean package
  artifacts:
    paths:
      - target
  tags:
    - dalfcs_gitlab_docker_ci

test:
  stage: test
  image: maven:latest
  artifacts:
    when: always
    reports:
      junit:
        - target/ProjectReports/TEST_*.xml

  script:
    - cd BackEnd
    - echo "Pipeline test started"
    - mvn verify
  tags:
    - dalfcs_gitlab_docker_ci

deploy_dev:
  stage: deploy
  tags:
    - dalfcs_gitlab_docker_ci
  artifacts:
    paths:
      - target
  script:
    - cd BackEnd
    - echo "dbURL=$DATABASE_TEST_URL" > config.properties
    - echo "dbUserName=$DATABASE_TEST_USERNAME" >> config.properties
    - echo "dbPassword=$DATABASE_TEST_PASSWORD" >> config.properties
    - echo "dbDriver=$DATABASE_DRIVER" >> config.properties
    - echo "Deploying the development pipeline"
    - chmod og-rwx ${DEPLOY_SSH_KEY}
    - scp -r -o StrictHostKeyChecking=no -i "${DEPLOY_SSH_KEY}" target/*.jar "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/final_image.jar"

deploy_release:
  stage: deploy
  tags:
    - dalfcs_gitlab_docker_ci
  artifacts:
    paths:
      - target
  script:
    - apt-get update
    - apt-get install openssh-client
    - bash docker_install.sh > /dev/null
    - echo "dbURL=$DATABASE_PROD_URL" > config.properties
    - echo "dbUserName=$DATABASE_PROD_USERNAME" >> config.properties
    - echo "dbPassword=$DATABASE_PROD_PASSWORD" >> config.properties
    - echo "dbDriver=$DATABASE_DRIVER" >> config.properties
    - echo "Deploying the release pipeline"
    - chmod og-rwx ${DEPLOY_PROD_SSH_KEY}
    - zip -r ${CI_COMMIT_SHORT_SHA}.zip target
    - scp -r -o StrictHostKeyChecking=no -i "${DEPLOY_PROD_SSH_KEY}" ${CI_COMMIT_SHORT_SHA}.zip "${DEPLOY_PROD_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}.zip"
